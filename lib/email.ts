import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY)

// Email templates
export const emailTemplates = {
  welcomeUser: (name: string) => ({
    subject: '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ Rabotim.com! üéâ',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 24px;">–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ Rabotim.com!</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${name}!</h2>
          <p style="color: #666; line-height: 1.6;">
            –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∏, —á–µ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏—Ö—Ç–µ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞ –ø–æ—á–∞—Å–æ–≤–∞ —Ä–∞–±–æ—Ç–∞ –≤ –ë—ä–ª–≥–∞—Ä–∏—è.
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">–ö–∞–∫–≤–æ –º–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–∞–≤–∏—Ç–µ:</h3>
            <ul style="color: #666;">
              <li>–ü—É–±–ª–∏–∫—É–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–º–µ—Ä–µ—Ç–µ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª–∏</li>
              <li>–ö–∞–Ω–¥–∏–¥–∞—Ç—Å—Ç–≤–∞–π—Ç–µ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏</li>
              <li>–û—Ü–µ–Ω—è–≤–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–≤–∞–π—Ç–µ –æ—Ç–∑–∏–≤–∏</li>
              <li>–û–±—â—É–≤–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å –∫–ª–∏–µ–Ω—Ç–∏</li>
            </ul>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/tasks" 
               style="background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –†–∞–∑–≥–ª–µ–¥–∞–π –∑–∞–¥–∞—á–∏—Ç–µ
            </a>
          </div>
        </div>
        
        <div style="background: #333; color: white; padding: 20px; text-align: center;">
          <p style="margin: 0;">Rabotim.com - –°–≤—ä—Ä–∑–≤–∞–º–µ —Ö–æ—Ä–∞—Ç–∞ –∑–∞ –ø–æ-–¥–æ–±—ä—Ä —Å–≤—è—Ç</p>
        </div>
      </div>
    `
  }),

  newTaskNotification: (recipientName: string, taskTitle: string, taskCategory: string, taskLocation: string) => ({
    subject: `–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞ –≤ ${taskCategory}: ${taskTitle}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #4CAF50; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 20px;">üÜï –ù–æ–≤–∞ –∑–∞–¥–∞—á–∞ –∑–∞ –≤–∞—Å!</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${recipientName}!</h2>
          <p style="color: #666; line-height: 1.6;">
            –ò–º–∞ –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞, –∫–æ—è—Ç–æ –º–æ–∂–µ –¥–∞ –≤–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞:
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #4CAF50;">
            <h3 style="color: #333; margin-top: 0;">${taskTitle}</h3>
            <p style="color: #666; margin: 5px 0;"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${taskCategory}</p>
            <p style="color: #666; margin: 5px 0;"><strong>–õ–æ–∫–∞—Ü–∏—è:</strong> ${taskLocation}</p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/tasks" 
               style="background: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í–∏–∂ –∑–∞–¥–∞—á–∞—Ç–∞
            </a>
          </div>
        </div>
      </div>
    `
  }),

  taskApplicationReceived: (taskOwner: string, applicantName: string, taskTitle: string) => ({
    subject: `–ù–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç –∑–∞ "${taskTitle}"`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #2196F3; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 20px;">üë§ –ù–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç!</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${taskOwner}!</h2>
          <p style="color: #666; line-height: 1.6;">
            <strong>${applicantName}</strong> –∫–∞–Ω–¥–∏–¥–∞—Ç—Å—Ç–≤–∞ –∑–∞ –≤–∞—à–∞—Ç–∞ –∑–∞–¥–∞—á–∞:
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #2196F3;">
            <h3 style="color: #333; margin-top: 0;">${taskTitle}</h3>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/messages" 
               style="background: #2196F3; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –ü—Ä–µ–≥–ª–µ–¥–∞–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞—Ç–∞
            </a>
          </div>
        </div>
      </div>
    `
  }),

  taskCompleted: (clientName: string, freelancerName: string, taskTitle: string) => ({
    subject: `–ó–∞–¥–∞—á–∞—Ç–∞ "${taskTitle}" –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #FF9800; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 20px;">‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞!</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${clientName}!</h2>
          <p style="color: #666; line-height: 1.6;">
            <strong>${freelancerName}</strong> –∑–∞–≤—ä—Ä—à–∏ –≤–∞—à–∞—Ç–∞ –∑–∞–¥–∞—á–∞:
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #FF9800;">
            <h3 style="color: #333; margin-top: 0;">${taskTitle}</h3>
          </div>
          
          <p style="color: #666; line-height: 1.6;">
            –ú–æ–ª—è, –æ—Ü–µ–Ω–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç–∞ –Ω–∞ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª—è, –∑–∞ –¥–∞ –ø–æ–º–æ–≥–Ω–µ—Ç–µ –Ω–∞ –¥—Ä—É–≥–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏.
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/ratings" 
               style="background: #FF9800; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –û—Ü–µ–Ω–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç–∞
            </a>
          </div>
        </div>
      </div>
    `
  }),

  newRatingReceived: (recipientName: string, ratingGiver: string, rating: number, taskTitle: string) => ({
    subject: `–ü–æ–ª—É—á–∏—Ö—Ç–µ ${rating}‚≠ê —Ä–µ–π—Ç–∏–Ω–≥`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #FFC107; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 20px;">‚≠ê –ù–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥!</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${recipientName}!</h2>
          <p style="color: #666; line-height: 1.6;">
            <strong>${ratingGiver}</strong> –≤–∏ –æ—Å—Ç–∞–≤–∏ ${rating}‚≠ê —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –∑–∞–¥–∞—á–∞—Ç–∞:
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #FFC107;">
            <h3 style="color: #333; margin-top: 0;">${taskTitle}</h3>
            <div style="font-size: 24px; color: #FFC107; text-align: center;">
              ${'‚≠ê'.repeat(rating)}
            </div>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/profile" 
               style="background: #FFC107; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í–∏–∂—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏
            </a>
          </div>
        </div>
      </div>
    `
  }),

  passwordReset: (name: string, resetUrl: string) => ({
    subject: '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞ - Rabotim.com',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #f44336; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 20px;">üîê –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞</h1>
        </div>
        
        <div style="padding: 30px; background: #f9f9f9;">
          <h2 style="color: #333;">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, ${name}!</h2>
          <p style="color: #666; line-height: 1.6;">
            –ü–æ–ª—É—á–∏—Ö–º–µ –∑–∞—è–≤–∫–∞ –∑–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≤–∞—à–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞.
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" 
               style="background: #f44336; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í—ä–∑—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞
            </a>
          </div>
          
          <p style="color: #666; font-size: 14px;">
            –ê–∫–æ –Ω–µ —Å—Ç–µ –∑–∞—è–≤–∏–ª–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞, –º–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ email.
            –õ–∏–Ω–∫—ä—Ç –µ –≤–∞–ª–∏–¥–µ–Ω 24 —á–∞—Å–∞.
          </p>
        </div>
      </div>
    `
  })
}

// Email service functions
export const emailService = {
  async sendWelcomeEmail(to: string, name: string) {
    try {
      const template = emailTemplates.welcomeUser(name)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <noreply@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending welcome email:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending welcome email:', error)
      return { success: false, error }
    }
  },

  async sendNewTaskNotification(to: string, recipientName: string, taskTitle: string, taskCategory: string, taskLocation: string) {
    try {
      const template = emailTemplates.newTaskNotification(recipientName, taskTitle, taskCategory, taskLocation)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <notifications@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending task notification:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending task notification:', error)
      return { success: false, error }
    }
  },

  async sendTaskApplicationNotification(to: string, taskOwner: string, applicantName: string, taskTitle: string) {
    try {
      const template = emailTemplates.taskApplicationReceived(taskOwner, applicantName, taskTitle)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <notifications@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending application notification:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending application notification:', error)
      return { success: false, error }
    }
  },

  async sendTaskCompletionNotification(to: string, clientName: string, freelancerName: string, taskTitle: string) {
    try {
      const template = emailTemplates.taskCompleted(clientName, freelancerName, taskTitle)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <notifications@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending completion notification:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending completion notification:', error)
      return { success: false, error }
    }
  },

  async sendNewRatingNotification(to: string, recipientName: string, ratingGiver: string, rating: number, taskTitle: string) {
    try {
      const template = emailTemplates.newRatingReceived(recipientName, ratingGiver, rating, taskTitle)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <notifications@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending rating notification:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending rating notification:', error)
      return { success: false, error }
    }
  },

  async sendPasswordResetEmail(to: string, name: string, resetUrl: string) {
    try {
      const template = emailTemplates.passwordReset(name, resetUrl)
      
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <security@rabotim.com>',
        to: [to],
        subject: template.subject,
        html: template.html,
      })

      if (error) {
        console.error('Error sending password reset email:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending password reset email:', error)
      return { success: false, error }
    }
  },

  // Bulk email for newsletter/marketing
  async sendBulkEmail(recipients: string[], subject: string, htmlContent: string) {
    try {
      const { data, error } = await resend.emails.send({
        from: 'Rabotim.com <newsletter@rabotim.com>',
        to: recipients,
        subject: subject,
        html: htmlContent,
      })

      if (error) {
        console.error('Error sending bulk email:', error)
        return { success: false, error }
      }

      return { success: true, data }
    } catch (error) {
      console.error('Error sending bulk email:', error)
      return { success: false, error }
    }
  }
}
